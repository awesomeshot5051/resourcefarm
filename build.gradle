plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.77'
    id 'com.gradleup.shadow' version '9.0.0-beta6'
    id("org.shipkit.shipkit-github-release") version "2.0.1"
    id("org.shipkit.shipkit-changelog") version "2.0.1"
    id("org.shipkit.shipkit-auto-version") version "2.1.0"
}
version = mod_version
group = 'resourcefarm'
def secretsFile = file("secrets/secrets.properties")
if (secretsFile.exists()) {
    def properties = new Properties()
    properties.load(secretsFile.newDataInputStream())
    properties.each { key, value -> project.ext.set(key, value) }
}
shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier = ''
    relocate 'com.awesomeshot5051.resourcefarm', "com.awesomeshot5051.resourcefarm.resourcefarm"
}
tasks.named("githubRelease") {
    dependsOn tasks.named("generateChangelog")
    depends on tasks . named("ReleaseJar")
    repository = "awesomeshot5051/resourcefarm"
    changelog = tasks.named("generateChangelog").get().outputFile
    githubToken = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
    // using env var to avoid checked-in secrets
    newTagRevision = "main"   // using an env var automatically exported by Github Actions
}

tasks.named("generateChangelog") {
    //file where the release notes are generated, default as below
    outputFile = new File(getLayout().getBuildDirectory().get().asFile, "changelog.md")

    //Working directory for running 'git' commands, default as below
    workingDir = project.projectDir

    //Github url, configure if you use Github Enterprise, default as below
    githubUrl = "https://github.com"

    //Github API url, configure if you use Github Enterprise, default as below
    githubApiUrl = "https://api.github.com"

    //Previous revision to generate changelog, *no default*
    previousRevision = project.ext.'shipkit-auto-version.previous-tag'

    //Current revision to generate changelog, default as below
    revision = "HEAD"

    //The release version, default as below
    version = mod_version

    //Release tag, by default it is "v" + project.version
    releaseTag = version

    //Repository to look for tickets, *no default*
    repository = "awesomeshot5051/resourcefarm"

    //Token used for fetching tickets, *empty*
    githubToken = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
    // using env var to avoid checked-in secrets
}
assemble.dependsOn('shadowJar')

repositories {
    mavenLocal()
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://mvnrepository.com/artifact/net.neoforged/JarJarSelector"
    }
    maven {
        url "https://maven.k-4u.nl"
    }
    maven {
        url "file://${project.projectDir}/repo"
    }
    maven {
        url = uri("https://maven.pkg.github.com/awesomeshot5051/corelib")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    implementation "mcjty.theoneprobe:theoneprobe:${top_version}"
    implementation "curse.maven:jade-324717:${jade_id}"
    localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
    shadow("com.awesomeshot5051.corelib:corelib:1.21-3.0.4")
    runtimeOnly "com.awesomeshot5051.corelib:corelib:1.21-3.0.4"
//    implementation("com.awesomeshot5051.corelib:corelib:1.21-2.1.5") {
//        exclude group: 'com.github.jitpack', module: 'gradle-simple'
//    }
}

tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/resources/META-INF"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata as Task
tasks.register("ReleaseJar") {
    dependsOn("jar", "shadowJar")
    doLast {
        println("ReleaseJar task completed.")
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(tasks.named("jar")) // Only main JAR, no sources/javadoc
        }
    }
    repositories {
        maven {
            url = layout.buildDirectory.dir("publishing-repository")
        }
    }
}
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/awesomeshot5051/resourcefarm")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}